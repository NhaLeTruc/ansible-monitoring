---
- name: Deploy Prometheus
  hosts: localhost # First, run tasks on the Ansible control node itself (often localhost)
  gather_facts: true # Collect information about the control node
  any_errors_fatal: true
  pre_tasks: 
  # Tasks that run *before* any roles on localhost
    - name: Include main variables
      ansible.builtin.include_vars: "roles/_common/defaults/main.yml"
      tags: always

- name: deploy_prometheus.yml | Perform pre-checks
  hosts: all
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true
  environment: "{{ proxy_env | default({}) }}"

  pre_tasks:
    - name: Include main variables
      ansible.builtin.include_vars: "roles/_common/defaults/main.yml"
      tags: always

    - name: Include system variables
      ansible.builtin.include_vars: "roles/_common/defaults/system.yml"
      tags: always

    - name: Include OS-specific variables
      ansible.builtin.include_vars: "roles/_common/defaults/{{ ansible_os_family }}.yml"
      tags: always

    - name: System info
      ansible.builtin.debug:
        msg:
          server_name: "{{ hostname | default(ansible_hostname) }}"
          server_location: "{{ server_location | default(omit) }}"
          ip_address: "{{ inventory_hostname | default('N/A') }}"
          os: "{{ ansible_distribution | default('N/A') }} {{ ansible_distribution_version | default('N/A') }}"
          kernel: "{{ ansible_kernel | default('N/A') }}"
          cpu:
            model: "{{ ansible_processor[2] | default('N/A') }}"
            count: "{{ ansible_processor_count | default('N/A') }}"
            cores: "{{ ansible_processor_cores | default('N/A') }}"
          memory: "{{ (ansible_memtotal_mb / 1024) | round(2) if ansible_memtotal_mb is defined else 'N/A' }} GB"
          disk_space_total: >-
            {{
              (ansible_mounts
                | map(attribute='size_total')
                | map('int')
                | sum / 1024 / 1024 / 1024
              )
              | round(2) if ansible_mounts is defined else 'N/A'
            }} GB
          architecture: "{{ ansible_architecture | default('N/A') }}"
          virtualization_type: "{{ ansible_virtualization_type | default('N/A') }}"
          product_name: "{{ ansible_product_name | default('N/A') }}"
      tags: always

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3
      environment: "{{ proxy_env | default({}) }}"
      when: ansible_os_family == "Debian" and installation_method == "repo"

    - name: Make sure the gnupg and apt-transport-https packages are present
      ansible.builtin.apt:
        pkg:
          - gnupg
          - apt-transport-https
        state: present
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3
      environment: "{{ proxy_env | default({}) }}"
      when: ansible_os_family == "Debian" and installation_method == "repo"

    # Ansible requires the iproute package for network facts to be populated
    - name: Make sure that the iproute is installed
      ansible.builtin.apt:
        name: iproute2
        state: present
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3
      when: ansible_os_family == "Debian"

    # (optional) Command or script to be executed before the Postgres cluster deployment.
    - block:
        - name: Print pre-deploy command
          ansible.builtin.debug:
            var: pre_deploy_command
          when: pre_deploy_command_print | default(false) | bool

        - name: Run pre-deploy command
          ansible.builtin.shell: "{{ pre_deploy_command }} > {{ pre_deploy_command_log | default('/var/tmp/pre_deploy_command.log') }} 2>&1"
          args:
            executable: /bin/bash
          register: pre_deploy_result
          delegate_to: "{{ item }}"
          loop: "{{ pre_deploy_command_hosts.split(',') | map('extract', groups) | list | flatten }}"
          async: "{{ pre_deploy_command_timeout }}" # run the command asynchronously
          poll: 0

        - name: Wait for the pre-deploy command to complete
          ansible.builtin.async_status:
            jid: "{{ item.ansible_job_id }}"
          register: pre_deploy_job_result
          delegate_to: "{{ item.item }}"
          loop: "{{ pre_deploy_result.results }}"
          loop_control:
            label: "{{ item.item }}"
          until: pre_deploy_job_result.finished
          retries: "{{ (pre_deploy_command_timeout | int) // 10 }}"
          delay: 10
          ignore_errors: true # allows to collect logs before stopping execution (in case of failure)
          when:
            - pre_deploy_result.results is defined
            - item.ansible_job_id is defined

        - name: Get pre-deploy command log
          ansible.builtin.command: "cat {{ pre_deploy_command_log | default('/var/tmp/pre_deploy_command.log') }}"
          register: pre_deploy_log_content
          delegate_to: "{{ item }}"
          loop: "{{ pre_deploy_command_hosts.split(',') | map('extract', groups) | list | flatten }}"
          changed_when: false
          when: pre_deploy_command_print_result | default(false) | bool

        - name: Print pre-deploy command result
          ansible.builtin.debug:
            msg: "{{ item.stdout_lines }}"
          loop: "{{ pre_deploy_log_content.results }}"
          loop_control:
            label: "{{ item.item }}"
          when:
            - pre_deploy_log_content.results is defined
            - item.stdout_lines is defined

        - name: Stop if pre-deploy command failed
          ansible.builtin.fail:
            msg: "Pre-deploy command failed. See log for details."
          when: pre_deploy_job_result.results | json_query('[?failed]') | length > 0
      run_once: true # noqa run-once
      when: pre_deploy_command | default('') | length > 0
      tags: pre_deploy, pre_deploy_command

  roles:
    - role: hostname
    - role: resolv_conf
    - role: timezone

- name: deploy_prometheus.yml | Deploy Prometheus
  hosts: prometheus
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true
  environment: "{{ proxy_env | default({}) }}"

  pre_tasks:
    - name: Include main variables
      ansible.builtin.include_vars: "roles/_common/defaults/main.yml"
      tags: always

    - name: Include system variables
      ansible.builtin.include_vars: "roles/_common/defaults/system.yml"
      tags: always

    - name: Include OS-specific variables
      ansible.builtin.include_vars: "roles/_common/defaults/{{ ansible_os_family }}.yml"
      tags: always

  roles:
    - role: prometheus

- name: deploy_prometheus.yml | Deploy Grafana
  hosts: grafana
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true
  environment: "{{ proxy_env | default({}) }}"

  pre_tasks:
    - name: Include main variables
      ansible.builtin.include_vars: "roles/_common/defaults/main.yml"
      tags: always

    - name: Include system variables
      ansible.builtin.include_vars: "roles/_common/defaults/system.yml"
      tags: always

    - name: Include OS-specific variables
      ansible.builtin.include_vars: "roles/_common/defaults/{{ ansible_os_family }}.yml"
      tags: always

  roles:
    - role: grafana